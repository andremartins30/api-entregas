// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       Int    @id @default(autoincrement())
  nome     String
  email    String @unique
  password String
  role     Role   @default(ENTREGADOR)

  // Entregas criadas por ele (ex: gestor)
  entregasCriadas Entrega[] @relation("CriadorEntrega")

  // Entregas atribuídas a ele (caso seja entregador)
  entregas Entrega[] @relation("EntregadorEntrega")

  veiculos Veiculo[]
}

enum Role {
  GESTOR
  ENTREGADOR
}

model Entrega {
  id        Int     @id @default(autoincrement())
  origem    String
  destino   String
  status    String
  usuarioId Int // quem criou
  usuario   Usuario @relation("CriadorEntrega", fields: [usuarioId], references: [id])

  entregadorId Int? // quem vai entregar
  entregador   Usuario? @relation("EntregadorEntrega", fields: [entregadorId], references: [id])

  veiculoId Int? // veículo utilizado na entrega
  veiculo   Veiculo? @relation(fields: [veiculoId], references: [id])

  criadaEm     DateTime @default(now())
  atualizadaEm DateTime @updatedAt

  comprovantes Comprovante[]
}

model Veiculo {
  id        Int       @id @default(autoincrement())
  placa     String    @unique
  modelo    String
  usuarioId Int
  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  entregas  Entrega[]

  isDeleted Boolean @default(false)
}

model Comprovante {
  id        Int      @id @default(autoincrement())
  caminho   String
  entregaId Int
  entrega   Entrega  @relation(fields: [entregaId], references: [id])
  criadoEm  DateTime @default(now())
}
